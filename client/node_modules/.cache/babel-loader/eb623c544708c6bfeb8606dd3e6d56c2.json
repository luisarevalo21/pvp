{"ast":null,"code":"(function ($) {\n  'use strict'; //<editor-fold desc=\"Shims\">\n\n  if (!String.prototype.includes) {\n    (function () {\n      'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\n      var toString = {}.toString;\n\n      var defineProperty = function () {\n        // IE 8 only supports `Object.defineProperty` on DOM elements\n        try {\n          var object = {};\n          var $defineProperty = Object.defineProperty;\n          var result = $defineProperty(object, object, object) && $defineProperty;\n        } catch (error) {}\n\n        return result;\n      }();\n\n      var indexOf = ''.indexOf;\n\n      var includes = function includes(search) {\n        if (this == null) {\n          throw TypeError();\n        }\n\n        var string = String(this);\n\n        if (search && toString.call(search) == '[object RegExp]') {\n          throw TypeError();\n        }\n\n        var stringLength = string.length;\n        var searchString = String(search);\n        var searchLength = searchString.length;\n        var position = arguments.length > 1 ? arguments[1] : undefined; // `ToInteger`\n\n        var pos = position ? Number(position) : 0;\n\n        if (pos != pos) {\n          // better `isNaN`\n          pos = 0;\n        }\n\n        var start = Math.min(Math.max(pos, 0), stringLength); // Avoid the `indexOf` call if no match is possible\n\n        if (searchLength + start > stringLength) {\n          return false;\n        }\n\n        return indexOf.call(string, searchString, pos) != -1;\n      };\n\n      if (defineProperty) {\n        defineProperty(String.prototype, 'includes', {\n          'value': includes,\n          'configurable': true,\n          'writable': true\n        });\n      } else {\n        String.prototype.includes = includes;\n      }\n    })();\n  }\n\n  if (!String.prototype.startsWith) {\n    (function () {\n      'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n\n      var defineProperty = function () {\n        // IE 8 only supports `Object.defineProperty` on DOM elements\n        try {\n          var object = {};\n          var $defineProperty = Object.defineProperty;\n          var result = $defineProperty(object, object, object) && $defineProperty;\n        } catch (error) {}\n\n        return result;\n      }();\n\n      var toString = {}.toString;\n\n      var startsWith = function startsWith(search) {\n        if (this == null) {\n          throw TypeError();\n        }\n\n        var string = String(this);\n\n        if (search && toString.call(search) == '[object RegExp]') {\n          throw TypeError();\n        }\n\n        var stringLength = string.length;\n        var searchString = String(search);\n        var searchLength = searchString.length;\n        var position = arguments.length > 1 ? arguments[1] : undefined; // `ToInteger`\n\n        var pos = position ? Number(position) : 0;\n\n        if (pos != pos) {\n          // better `isNaN`\n          pos = 0;\n        }\n\n        var start = Math.min(Math.max(pos, 0), stringLength); // Avoid the `indexOf` call if no match is possible\n\n        if (searchLength + start > stringLength) {\n          return false;\n        }\n\n        var index = -1;\n\n        while (++index < searchLength) {\n          if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      if (defineProperty) {\n        defineProperty(String.prototype, 'startsWith', {\n          'value': startsWith,\n          'configurable': true,\n          'writable': true\n        });\n      } else {\n        String.prototype.startsWith = startsWith;\n      }\n    })();\n  } //</editor-fold>\n  // Case insensitive contains search\n\n\n  $.expr[':'].icontains = function (obj, index, meta) {\n    var $obj = $(obj);\n    var haystack = ($obj.data('tokens') || $obj.text()).toUpperCase();\n    return haystack.includes(meta[3].toUpperCase());\n  }; // Case insensitive begins search\n\n\n  $.expr[':'].ibegins = function (obj, index, meta) {\n    var $obj = $(obj);\n    var haystack = ($obj.data('tokens') || $obj.text()).toUpperCase();\n    return haystack.startsWith(meta[3].toUpperCase());\n  }; // Case and accent insensitive contains search\n\n\n  $.expr[':'].aicontains = function (obj, index, meta) {\n    var $obj = $(obj);\n    var haystack = ($obj.data('tokens') || $obj.data('normalizedText') || $obj.text()).toUpperCase();\n    return haystack.includes(haystack, meta[3]);\n  }; // Case and accent insensitive begins search\n\n\n  $.expr[':'].aibegins = function (obj, index, meta) {\n    var $obj = $(obj);\n    var haystack = ($obj.data('tokens') || $obj.data('normalizedText') || $obj.text()).toUpperCase();\n    return haystack.startsWith(meta[3].toUpperCase());\n  };\n  /**\n   * Remove all diatrics from the given text.\n   * @access private\n   * @param {String} text\n   * @returns {String}\n   */\n\n\n  function normalizeToBase(text) {\n    var rExps = [{\n      re: /[\\xC0-\\xC6]/g,\n      ch: \"A\"\n    }, {\n      re: /[\\xE0-\\xE6]/g,\n      ch: \"a\"\n    }, {\n      re: /[\\xC8-\\xCB]/g,\n      ch: \"E\"\n    }, {\n      re: /[\\xE8-\\xEB]/g,\n      ch: \"e\"\n    }, {\n      re: /[\\xCC-\\xCF]/g,\n      ch: \"I\"\n    }, {\n      re: /[\\xEC-\\xEF]/g,\n      ch: \"i\"\n    }, {\n      re: /[\\xD2-\\xD6]/g,\n      ch: \"O\"\n    }, {\n      re: /[\\xF2-\\xF6]/g,\n      ch: \"o\"\n    }, {\n      re: /[\\xD9-\\xDC]/g,\n      ch: \"U\"\n    }, {\n      re: /[\\xF9-\\xFC]/g,\n      ch: \"u\"\n    }, {\n      re: /[\\xC7-\\xE7]/g,\n      ch: \"c\"\n    }, {\n      re: /[\\xD1]/g,\n      ch: \"N\"\n    }, {\n      re: /[\\xF1]/g,\n      ch: \"n\"\n    }];\n    $.each(rExps, function () {\n      text = text.replace(this.re, this.ch);\n    });\n    return text;\n  }\n\n  function htmlEscape(html) {\n    var escapeMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      \"'\": '&#x27;',\n      '`': '&#x60;'\n    };\n    var source = '(?:' + Object.keys(escapeMap).join('|') + ')',\n        testRegexp = new RegExp(source),\n        replaceRegexp = new RegExp(source, 'g'),\n        string = html == null ? '' : '' + html;\n    return testRegexp.test(string) ? string.replace(replaceRegexp, function (match) {\n      return escapeMap[match];\n    }) : string;\n  }\n\n  var Selectpicker = function Selectpicker(element, options, e) {\n    if (e) {\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    this.$element = $(element);\n    this.$newElement = null;\n    this.$button = null;\n    this.$menu = null;\n    this.$lis = null;\n    this.options = options; // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a\n    // data-attribute)\n\n    if (this.options.title === null) {\n      this.options.title = this.$element.attr('title');\n    } //Expose public methods\n\n\n    this.val = Selectpicker.prototype.val;\n    this.render = Selectpicker.prototype.render;\n    this.refresh = Selectpicker.prototype.refresh;\n    this.setStyle = Selectpicker.prototype.setStyle;\n    this.selectAll = Selectpicker.prototype.selectAll;\n    this.deselectAll = Selectpicker.prototype.deselectAll;\n    this.destroy = Selectpicker.prototype.remove;\n    this.remove = Selectpicker.prototype.remove;\n    this.show = Selectpicker.prototype.show;\n    this.hide = Selectpicker.prototype.hide;\n    this.init();\n  };\n\n  Selectpicker.VERSION = '1.6.3'; // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.\n\n  Selectpicker.DEFAULTS = {\n    noneSelectedText: 'Nothing selected',\n    noneResultsText: 'No results matched {0}',\n    countSelectedText: function countSelectedText(numSelected, numTotal) {\n      return numSelected == 1 ? \"{0} item selected\" : \"{0} items selected\";\n    },\n    maxOptionsText: function maxOptionsText(numAll, numGroup) {\n      return [numAll == 1 ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)', numGroup == 1 ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'];\n    },\n    selectAllText: 'Select All',\n    deselectAllText: 'Deselect All',\n    doneButton: false,\n    doneButtonText: 'Close',\n    multipleSeparator: ', ',\n    style: 'btn-default',\n    size: 'auto',\n    title: null,\n    selectedTextFormat: 'values',\n    width: false,\n    container: false,\n    hideDisabled: false,\n    showSubtext: false,\n    showIcon: true,\n    showContent: true,\n    dropupAuto: true,\n    header: false,\n    liveSearch: false,\n    liveSearchPlaceholder: null,\n    liveSearchNormalize: false,\n    liveSearchStyle: 'contains',\n    actionsBox: false,\n    iconBase: 'glyphicon',\n    tickIcon: 'glyphicon-ok',\n    maxOptions: false,\n    mobile: false,\n    selectOnTab: false,\n    dropdownAlignRight: false\n  };\n  Selectpicker.prototype = {\n    constructor: Selectpicker,\n    init: function init() {\n      var that = this,\n          id = this.$element.attr('id');\n      this.$element.hide();\n      this.multiple = this.$element.prop('multiple');\n      this.autofocus = this.$element.prop('autofocus');\n      this.$newElement = this.createView();\n      this.$element.after(this.$newElement);\n      this.$menu = this.$newElement.children('.dropdown-menu');\n      this.$button = this.$newElement.children('button');\n      this.$searchbox = this.$newElement.find('input');\n      if (this.options.dropdownAlignRight) this.$menu.addClass('dropdown-menu-right');\n\n      if (typeof id !== 'undefined') {\n        this.$button.attr('data-id', id);\n        $('label[for=\"' + id + '\"]').click(function (e) {\n          e.preventDefault();\n          that.$button.focus();\n        });\n      }\n\n      this.checkDisabled();\n      this.clickListener();\n      if (this.options.liveSearch) this.liveSearchListener();\n      this.render();\n      this.liHeight();\n      this.setStyle();\n      this.setWidth();\n      if (this.options.container) this.selectPosition();\n      this.$menu.data('this', this);\n      this.$newElement.data('this', this);\n      if (this.options.mobile) this.mobile();\n    },\n    createDropdown: function createDropdown() {\n      // Options\n      // If we are multiple, then add the show-tick class by default\n      var multiple = this.multiple ? ' show-tick' : '',\n          inputGroup = this.$element.parent().hasClass('input-group') ? ' input-group-btn' : '',\n          autofocus = this.autofocus ? ' autofocus' : ''; // Elements\n\n      var header = this.options.header ? '<div class=\"popover-title\"><button type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button>' + this.options.header + '</div>' : '';\n      var searchbox = this.options.liveSearch ? '<div class=\"bs-searchbox\">' + '<input type=\"text\" class=\"form-control\" autocomplete=\"off\"' + (null === this.options.liveSearchPlaceholder ? '' : ' placeholder=\"' + htmlEscape(this.options.liveSearchPlaceholder) + '\"') + '>' + '</div>' : '';\n      var actionsbox = this.multiple && this.options.actionsBox ? '<div class=\"bs-actionsbox\">' + '<div class=\"btn-group btn-group-sm btn-block\">' + '<button class=\"actions-btn bs-select-all btn btn-default\">' + this.options.selectAllText + '</button>' + '<button class=\"actions-btn bs-deselect-all btn btn-default\">' + this.options.deselectAllText + '</button>' + '</div>' + '</div>' : '';\n      var donebutton = this.multiple && this.options.doneButton ? '<div class=\"bs-donebutton\">' + '<div class=\"btn-group btn-block\">' + '<button class=\"btn btn-sm btn-default\">' + this.options.doneButtonText + '</button>' + '</div>' + '</div>' : '';\n      var drop = '<div class=\"btn-group bootstrap-select' + multiple + inputGroup + '\">' + '<button type=\"button\" class=\"btn dropdown-toggle form-control selectpicker\" data-toggle=\"dropdown\"' + autofocus + '>' + '<span class=\"filter-option pull-left\"></span>&nbsp;' + '<span class=\"caret\"></span>' + '</button>' + '<div class=\"dropdown-menu open\">' + header + searchbox + actionsbox + '<ul class=\"dropdown-menu inner selectpicker\" role=\"menu\">' + '</ul>' + donebutton + '</div>' + '</div>';\n      return $(drop);\n    },\n    createView: function createView() {\n      var $drop = this.createDropdown();\n      var $li = this.createLi();\n      $drop.find('ul').append($li);\n      return $drop;\n    },\n    reloadLi: function reloadLi() {\n      //Remove all children.\n      this.destroyLi(); //Re build\n\n      var $li = this.createLi();\n      this.$menu.find('ul').append($li);\n    },\n    destroyLi: function destroyLi() {\n      this.$menu.find('li').remove();\n    },\n    createLi: function createLi() {\n      var that = this,\n          _li = [],\n          optID = 0; // Helper functions\n\n      /**\n       * @param content\n       * @param [index]\n       * @param [classes]\n       * @param [optgroup]\n       * @returns {string}\n       */\n\n      var generateLI = function generateLI(content, index, classes, optgroup) {\n        return '<li' + (typeof classes !== 'undefined' & '' !== classes ? ' class=\"' + classes + '\"' : '') + (typeof index !== 'undefined' & null !== index ? ' data-original-index=\"' + index + '\"' : '') + (typeof optgroup !== 'undefined' & null !== optgroup ? 'data-optgroup=\"' + optgroup + '\"' : '') + '>' + content + '</li>';\n      };\n      /**\n       * @param text\n       * @param [classes]\n       * @param [inline]\n       * @param [tokens]\n       * @returns {string}\n       */\n\n\n      var generateA = function generateA(text, classes, inline, tokens) {\n        return '<a tabindex=\"0\"' + (typeof classes !== 'undefined' ? ' class=\"' + classes + '\"' : '') + (typeof inline !== 'undefined' ? ' style=\"' + inline + '\"' : '') + ' data-normalized-text=\"' + normalizeToBase(htmlEscape(text)) + '\"' + (typeof tokens !== 'undefined' || tokens !== null ? ' data-tokens=\"' + tokens + '\"' : '') + '>' + text + '<span class=\"' + that.options.iconBase + ' ' + that.options.tickIcon + ' check-mark\"></span>' + '</a>';\n      };\n\n      this.$element.find('option').each(function (index) {\n        var $this = $(this); // Get the class and text for the option\n\n        var optionClass = $this.attr('class') || '',\n            inline = $this.attr('style'),\n            text = $this.data('content') ? $this.data('content') : $this.html(),\n            tokens = $this.data('tokens') ? $this.data('tokens') : null,\n            subtext = typeof $this.data('subtext') !== 'undefined' ? '<small class=\"text-muted\">' + $this.data('subtext') + '</small>' : '',\n            icon = typeof $this.data('icon') !== 'undefined' ? '<span class=\"' + that.options.iconBase + ' ' + $this.data('icon') + '\"></span> ' : '',\n            isDisabled = $this.is(':disabled') || $this.parent().is(':disabled');\n\n        if (icon !== '' && isDisabled) {\n          icon = '<span>' + icon + '</span>';\n        }\n\n        if (!$this.data('content')) {\n          // Prepend any icon and append any subtext to the main text.\n          text = icon + '<span class=\"text\">' + text + subtext + '</span>';\n        }\n\n        if (that.options.hideDisabled && isDisabled) {\n          return;\n        }\n\n        if ($this.parent().is('optgroup') && $this.data('divider') !== true) {\n          if ($this.index() === 0) {\n            // Is it the first option of the optgroup?\n            optID += 1; // Get the opt group label\n\n            var label = $this.parent().attr('label');\n            var labelSubtext = typeof $this.parent().data('subtext') !== 'undefined' ? '<small class=\"text-muted\">' + $this.parent().data('subtext') + '</small>' : '';\n            var labelIcon = $this.parent().data('icon') ? '<span class=\"' + that.options.iconBase + ' ' + $this.parent().data('icon') + '\"></span> ' : '';\n            label = labelIcon + '<span class=\"text\">' + label + labelSubtext + '</span>';\n\n            if (index !== 0 && _li.length > 0) {\n              // Is it NOT the first option of the select && are there elements in the dropdown?\n              _li.push(generateLI('', null, 'divider'));\n            }\n\n            _li.push(generateLI(label, null, 'dropdown-header', optID));\n          }\n\n          _li.push(generateLI(generateA(text, 'opt ' + optionClass, inline, tokens), index, '', optID));\n        } else if ($this.data('divider') === true) {\n          _li.push(generateLI('', index, 'divider'));\n        } else if ($this.data('hidden') === true) {\n          _li.push(generateLI(generateA(text, optionClass, inline, tokens), index, 'hidden is-hidden'));\n        } else {\n          _li.push(generateLI(generateA(text, optionClass, inline, tokens), index));\n        }\n      }); //If we are not multiple, we don't have a selected item, and we don't have a title, select the first element so something is set in the button\n\n      if (!this.multiple && this.$element.find('option:selected').length === 0 && !this.options.title) {\n        this.$element.find('option').eq(0).prop('selected', true).attr('selected', 'selected');\n      }\n\n      return $(_li.join(''));\n    },\n    findLis: function findLis() {\n      if (this.$lis == null) this.$lis = this.$menu.find('li');\n      return this.$lis;\n    },\n\n    /**\n     * @param [updateLi] defaults to true\n     */\n    render: function render(updateLi) {\n      var that = this; //Update the LI to match the SELECT\n\n      if (updateLi !== false) {\n        this.$element.find('option').each(function (index) {\n          that.setDisabled(index, $(this).is(':disabled') || $(this).parent().is(':disabled'));\n          that.setSelected(index, $(this).is(':selected'));\n        });\n      }\n\n      this.tabIndex();\n      var notDisabled = this.options.hideDisabled ? ':not([disabled])' : '';\n      var selectedItems = this.$element.find('option:selected' + notDisabled).map(function () {\n        var $this = $(this);\n        var icon = $this.data('icon') && that.options.showIcon ? '<i class=\"' + that.options.iconBase + ' ' + $this.data('icon') + '\"></i> ' : '';\n        var subtext;\n\n        if (that.options.showSubtext && $this.attr('data-subtext') && !that.multiple) {\n          subtext = ' <small class=\"text-muted\">' + $this.data('subtext') + '</small>';\n        } else {\n          subtext = '';\n        }\n\n        if (typeof $this.attr('title') !== 'undefined') {\n          return $this.attr('title');\n        } else if ($this.data('content') && that.options.showContent) {\n          return $this.data('content');\n        } else {\n          return icon + $this.html() + subtext;\n        }\n      }).toArray(); //Fixes issue in IE10 occurring when no default option is selected and at least one option is disabled\n      //Convert all the values into a comma delimited string\n\n      var title = !this.multiple ? selectedItems[0] : selectedItems.join(this.options.multipleSeparator); //If this is multi select, and the selectText type is count, the show 1 of 2 selected etc..\n\n      if (this.multiple && this.options.selectedTextFormat.indexOf('count') > -1) {\n        var max = this.options.selectedTextFormat.split('>');\n\n        if (max.length > 1 && selectedItems.length > max[1] || max.length == 1 && selectedItems.length >= 2) {\n          notDisabled = this.options.hideDisabled ? ', [disabled]' : '';\n          var totalCount = this.$element.find('option').not('[data-divider=\"true\"], [data-hidden=\"true\"]' + notDisabled).length,\n              tr8nText = typeof this.options.countSelectedText === 'function' ? this.options.countSelectedText(selectedItems.length, totalCount) : this.options.countSelectedText;\n          title = tr8nText.replace('{0}', selectedItems.length.toString()).replace('{1}', totalCount.toString());\n        }\n      }\n\n      if (this.options.title == undefined) {\n        this.options.title = this.$element.attr('title');\n      }\n\n      if (this.options.selectedTextFormat == 'static') {\n        title = this.options.title;\n      } //If we dont have a title, then use the default, or if nothing is set at all, use the not selected text\n\n\n      if (!title) {\n        title = typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText;\n      } //strip all html-tags and trim the result\n\n\n      this.$button.attr('title', $.trim(title.replace(/<[^>]*>?/g, '')));\n      this.$newElement.find('.filter-option').html(title);\n    },\n\n    /**\n     * @param [style]\n     * @param [status]\n     */\n    setStyle: function setStyle(style, status) {\n      if (this.$element.attr('class')) {\n        this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|validate\\[.*\\]/gi, ''));\n      }\n\n      var buttonClass = style ? style : this.options.style;\n\n      if (status == 'add') {\n        this.$button.addClass(buttonClass);\n      } else if (status == 'remove') {\n        this.$button.removeClass(buttonClass);\n      } else {\n        this.$button.removeClass(this.options.style);\n        this.$button.addClass(buttonClass);\n      }\n    },\n    liHeight: function liHeight() {\n      if (this.options.size === false) return;\n      var $selectClone = this.$menu.parent().clone().children('.dropdown-toggle').prop('autofocus', false).end().appendTo('body'),\n          $menuClone = $selectClone.addClass('open').children('.dropdown-menu'),\n          liHeight = $menuClone.find('li').not('.divider').not('.dropdown-header').filter(':visible').children('a').outerHeight(),\n          headerHeight = this.options.header ? $menuClone.find('.popover-title').outerHeight() : 0,\n          searchHeight = this.options.liveSearch ? $menuClone.find('.bs-searchbox').outerHeight() : 0,\n          actionsHeight = this.options.actionsBox ? $menuClone.find('.bs-actionsbox').outerHeight() : 0,\n          doneButtonHeight = this.multiple ? $menuClone.find('.bs-donebutton').outerHeight() : 0;\n      $selectClone.remove();\n      this.$newElement.data('liHeight', liHeight).data('headerHeight', headerHeight).data('searchHeight', searchHeight).data('actionsHeight', actionsHeight).data('doneButtonHeight', doneButtonHeight);\n    },\n    setSize: function setSize() {\n      this.findLis();\n\n      var that = this,\n          menu = this.$menu,\n          menuInner = menu.find('.inner'),\n          selectHeight = this.$newElement.outerHeight(),\n          liHeight = this.$newElement.data('liHeight'),\n          headerHeight = this.$newElement.data('headerHeight'),\n          searchHeight = this.$newElement.data('searchHeight'),\n          actionsHeight = this.$newElement.data('actionsHeight'),\n          doneButtonHeight = this.$newElement.data('doneButtonHeight'),\n          divHeight = this.$lis.filter('.divider').outerHeight(true),\n          menuPadding = parseInt(menu.css('padding-top')) + parseInt(menu.css('padding-bottom')) + parseInt(menu.css('border-top-width')) + parseInt(menu.css('border-bottom-width')),\n          notDisabled = this.options.hideDisabled ? ', .disabled' : '',\n          $window = $(window),\n          menuExtras = menuPadding + parseInt(menu.css('margin-top')) + parseInt(menu.css('margin-bottom')) + 2,\n          menuHeight,\n          selectOffsetTop,\n          selectOffsetBot,\n          posVert = function posVert() {\n        // JQuery defines a scrollTop function, but in pure JS it's a property\n        //noinspection JSValidateTypes\n        selectOffsetTop = that.$newElement.offset().top - $window.scrollTop();\n        selectOffsetBot = $window.height() - selectOffsetTop - selectHeight;\n      };\n\n      posVert();\n      if (this.options.header) menu.css('padding-top', 0);\n\n      if (this.options.size == 'auto') {\n        var getSize = function getSize() {\n          var minHeight,\n              lisVis = that.$lis.not('.hidden');\n          posVert();\n          menuHeight = selectOffsetBot - menuExtras;\n\n          if (that.options.dropupAuto) {\n            that.$newElement.toggleClass('dropup', selectOffsetTop > selectOffsetBot && menuHeight - menuExtras < menu.height());\n          }\n\n          if (that.$newElement.hasClass('dropup')) {\n            menuHeight = selectOffsetTop - menuExtras;\n          }\n\n          if (lisVis.length + lisVis.filter('.dropdown-header').length > 3) {\n            minHeight = liHeight * 3 + menuExtras - 2;\n          } else {\n            minHeight = 0;\n          }\n\n          menu.css({\n            'max-height': menuHeight + 'px',\n            'overflow': 'hidden',\n            'min-height': minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight + 'px'\n          });\n          menuInner.css({\n            'max-height': menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding + 'px',\n            'overflow-y': 'auto',\n            'min-height': Math.max(minHeight - menuPadding, 0) + 'px'\n          });\n        };\n\n        getSize();\n        this.$searchbox.off('input.getSize propertychange.getSize').on('input.getSize propertychange.getSize', getSize);\n        $window.off('resize.getSize').on('resize.getSize', getSize);\n        $window.off('scroll.getSize').on('scroll.getSize', getSize);\n      } else if (this.options.size && this.options.size != 'auto' && menu.find('li' + notDisabled).length > this.options.size) {\n        var optIndex = this.$lis.not('.divider' + notDisabled).children().slice(0, this.options.size).last().parent().index();\n        var divLength = this.$lis.slice(0, optIndex + 1).filter('.divider').length;\n        menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding;\n\n        if (that.options.dropupAuto) {\n          //noinspection JSUnusedAssignment\n          this.$newElement.toggleClass('dropup', selectOffsetTop > selectOffsetBot && menuHeight < menu.height());\n        }\n\n        menu.css({\n          'max-height': menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight + 'px',\n          'overflow': 'hidden'\n        });\n        menuInner.css({\n          'max-height': menuHeight - menuPadding + 'px',\n          'overflow-y': 'auto'\n        });\n      }\n    },\n    setWidth: function setWidth() {\n      if (this.options.width == 'auto') {\n        this.$menu.css('min-width', '0'); // Get correct width if element hidden\n\n        var selectClone = this.$newElement.clone().appendTo('body');\n        var ulWidth = selectClone.children('.dropdown-menu').css('width');\n        var btnWidth = selectClone.css('width', 'auto').children('button').css('width');\n        selectClone.remove(); // Set width to whatever's larger, button title or longest option\n\n        this.$newElement.css('width', Math.max(parseInt(ulWidth), parseInt(btnWidth)) + 'px');\n      } else if (this.options.width == 'fit') {\n        // Remove inline min-width so width can be changed from 'auto'\n        this.$menu.css('min-width', '');\n        this.$newElement.css('width', '').addClass('fit-width');\n      } else if (this.options.width) {\n        // Remove inline min-width so width can be changed from 'auto'\n        this.$menu.css('min-width', '');\n        this.$newElement.css('width', this.options.width);\n      } else {\n        // Remove inline min-width/width so width can be changed\n        this.$menu.css('min-width', '');\n        this.$newElement.css('width', '');\n      } // Remove fit-width class if width is changed programmatically\n\n\n      if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {\n        this.$newElement.removeClass('fit-width');\n      }\n    },\n    selectPosition: function selectPosition() {\n      var that = this,\n          drop = '<div />',\n          $drop = $(drop),\n          pos,\n          actualHeight,\n          getPlacement = function getPlacement($element) {\n        $drop.addClass($element.attr('class').replace(/form-control/gi, '')).toggleClass('dropup', $element.hasClass('dropup'));\n        pos = $element.offset();\n        actualHeight = $element.hasClass('dropup') ? 0 : $element[0].offsetHeight;\n        $drop.css({\n          'top': pos.top + actualHeight,\n          'left': pos.left,\n          'width': $element[0].offsetWidth,\n          'position': 'absolute'\n        });\n      };\n\n      this.$newElement.on('click', function () {\n        if (that.isDisabled()) {\n          return;\n        }\n\n        getPlacement($(this));\n        $drop.appendTo(that.options.container);\n        $drop.toggleClass('open', !$(this).hasClass('open'));\n        $drop.append(that.$menu);\n      });\n      $(window).resize(function () {\n        getPlacement(that.$newElement);\n      });\n      $(window).on('scroll', function () {\n        getPlacement(that.$newElement);\n      });\n      $('html').on('click', function (e) {\n        if ($(e.target).closest(that.$newElement).length < 1) {\n          $drop.removeClass('open');\n        }\n      });\n    },\n    setSelected: function setSelected(index, selected) {\n      this.findLis();\n      this.$lis.filter('[data-original-index=\"' + index + '\"]').toggleClass('selected', selected);\n    },\n    setDisabled: function setDisabled(index, disabled) {\n      this.findLis();\n\n      if (disabled) {\n        this.$lis.filter('[data-original-index=\"' + index + '\"]').addClass('disabled').find('a').attr('href', '#').attr('tabindex', -1);\n      } else {\n        this.$lis.filter('[data-original-index=\"' + index + '\"]').removeClass('disabled').find('a').removeAttr('href').attr('tabindex', 0);\n      }\n    },\n    isDisabled: function isDisabled() {\n      return this.$element.is(':disabled');\n    },\n    checkDisabled: function checkDisabled() {\n      var that = this;\n\n      if (this.isDisabled()) {\n        this.$button.addClass('disabled').attr('tabindex', -1);\n      } else {\n        if (this.$button.hasClass('disabled')) {\n          this.$button.removeClass('disabled');\n        }\n\n        if (this.$button.attr('tabindex') == -1) {\n          if (!this.$element.data('tabindex')) this.$button.removeAttr('tabindex');\n        }\n      }\n\n      this.$button.click(function () {\n        return !that.isDisabled();\n      });\n    },\n    tabIndex: function tabIndex() {\n      if (this.$element.is('[tabindex]')) {\n        this.$element.data('tabindex', this.$element.attr('tabindex'));\n        this.$button.attr('tabindex', this.$element.data('tabindex'));\n      }\n    },\n    clickListener: function clickListener() {\n      var that = this;\n      this.$newElement.on('touchstart.dropdown', '.dropdown-menu', function (e) {\n        e.stopPropagation();\n      });\n      this.$newElement.on('click', function () {\n        that.setSize();\n\n        if (!that.options.liveSearch && !that.multiple) {\n          setTimeout(function () {\n            that.$menu.find('.selected a').focus();\n          }, 10);\n        }\n      });\n      this.$menu.on('click', 'li a', function (e) {\n        var $this = $(this),\n            clickedIndex = $this.parent().data('originalIndex'),\n            prevValue = that.$element.val(),\n            prevIndex = that.$element.prop('selectedIndex'); // Don't close on multi choice menu\n\n        if (that.multiple) {\n          e.stopPropagation();\n        }\n\n        e.preventDefault(); //Don't run if we have been disabled\n\n        if (!that.isDisabled() && !$this.parent().hasClass('disabled')) {\n          var $options = that.$element.find('option'),\n              $option = $options.eq(clickedIndex),\n              state = $option.prop('selected'),\n              $optgroup = $option.parent('optgroup'),\n              maxOptions = that.options.maxOptions,\n              maxOptionsGrp = $optgroup.data('maxOptions') || false;\n\n          if (!that.multiple) {\n            // Deselect all others if not multi select box\n            $options.prop('selected', false);\n            $option.prop('selected', true);\n            that.$menu.find('.selected').removeClass('selected');\n            that.setSelected(clickedIndex, true);\n          } else {\n            // Toggle the one we have chosen if we are multi select.\n            $option.prop('selected', !state);\n            that.setSelected(clickedIndex, !state);\n            $this.blur();\n\n            if (maxOptions !== false || maxOptionsGrp !== false) {\n              var maxReached = maxOptions < $options.filter(':selected').length,\n                  maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;\n\n              if (maxOptions && maxReached || maxOptionsGrp && maxReachedGrp) {\n                if (maxOptions && maxOptions == 1) {\n                  $options.prop('selected', false);\n                  $option.prop('selected', true);\n                  that.$menu.find('.selected').removeClass('selected');\n                  that.setSelected(clickedIndex, true);\n                } else if (maxOptionsGrp && maxOptionsGrp == 1) {\n                  $optgroup.find('option:selected').prop('selected', false);\n                  $option.prop('selected', true);\n                  var optgroupID = $this.data('optgroup');\n                  that.$menu.find('.selected').has('a[data-optgroup=\"' + optgroupID + '\"]').removeClass('selected');\n                  that.setSelected(clickedIndex, true);\n                } else {\n                  var maxOptionsArr = typeof that.options.maxOptionsText === 'function' ? that.options.maxOptionsText(maxOptions, maxOptionsGrp) : that.options.maxOptionsText,\n                      maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),\n                      maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),\n                      $notify = $('<div class=\"notify\"></div>'); // If {var} is set in array, replace it\n\n                  /** @deprecated */\n\n                  if (maxOptionsArr[2]) {\n                    maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);\n                    maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);\n                  }\n\n                  $option.prop('selected', false);\n                  that.$menu.append($notify);\n\n                  if (maxOptions && maxReached) {\n                    $notify.append($('<div>' + maxTxt + '</div>'));\n                    that.$element.trigger('maxReached.bs.select');\n                  }\n\n                  if (maxOptionsGrp && maxReachedGrp) {\n                    $notify.append($('<div>' + maxTxtGrp + '</div>'));\n                    that.$element.trigger('maxReachedGrp.bs.select');\n                  }\n\n                  setTimeout(function () {\n                    that.setSelected(clickedIndex, false);\n                  }, 10);\n                  $notify.delay(750).fadeOut(300, function () {\n                    $(this).remove();\n                  });\n                }\n              }\n            }\n          }\n\n          if (!that.multiple) {\n            that.$button.focus();\n          } else if (that.options.liveSearch) {\n            that.$searchbox.focus();\n          } // Trigger select 'change'\n\n\n          if (prevValue != that.$element.val() && that.multiple || prevIndex != that.$element.prop('selectedIndex') && !that.multiple) {\n            that.$element.change();\n          }\n        }\n      });\n      this.$menu.on('click', 'li.disabled a, .popover-title, .popover-title :not(.close)', function (e) {\n        if (e.currentTarget == this) {\n          e.preventDefault();\n          e.stopPropagation();\n\n          if (!that.options.liveSearch) {\n            that.$button.focus();\n          } else {\n            that.$searchbox.focus();\n          }\n        }\n      });\n      this.$menu.on('click', 'li.divider, li.dropdown-header', function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!that.options.liveSearch) {\n          that.$button.focus();\n        } else {\n          that.$searchbox.focus();\n        }\n      });\n      this.$menu.on('click', '.popover-title .close', function () {\n        that.$button.focus();\n      });\n      this.$searchbox.on('click', function (e) {\n        e.stopPropagation();\n      });\n      this.$menu.on('click', '.actions-btn', function (e) {\n        if (that.options.liveSearch) {\n          that.$searchbox.focus();\n        } else {\n          that.$button.focus();\n        }\n\n        e.preventDefault();\n        e.stopPropagation();\n\n        if ($(this).is('.bs-select-all')) {\n          that.selectAll();\n        } else {\n          that.deselectAll();\n        }\n\n        that.$element.change();\n      });\n      this.$element.change(function () {\n        that.render(false);\n      });\n    },\n    liveSearchListener: function liveSearchListener() {\n      var that = this,\n          no_results = $('<li class=\"no-results\"></li>');\n      this.$newElement.on('click.dropdown.data-api touchstart.dropdown.data-api', function () {\n        that.$menu.find('.active').removeClass('active');\n\n        if (!!that.$searchbox.val()) {\n          that.$searchbox.val('');\n          that.$lis.not('.is-hidden').removeClass('hidden');\n          if (!!no_results.parent().length) no_results.remove();\n        }\n\n        if (!that.multiple) that.$menu.find('.selected').addClass('active');\n        setTimeout(function () {\n          that.$searchbox.focus();\n        }, 10);\n      });\n      this.$searchbox.on('click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api', function (e) {\n        e.stopPropagation();\n      });\n      this.$searchbox.on('input propertychange', function () {\n        if (that.$searchbox.val()) {\n          var $searchBase = that.$lis.not('.is-hidden').removeClass('hidden').find('a');\n\n          if (that.options.liveSearchNormalize) {\n            $searchBase = $searchBase.not(':a' + that._searchStyle() + '(' + normalizeToBase(that.$searchbox.val()) + ')');\n          } else {\n            $searchBase = $searchBase.not(':' + that._searchStyle() + '(' + that.$searchbox.val() + ')');\n          }\n\n          $searchBase.parent().addClass('hidden');\n          that.$lis.filter('.dropdown-header').each(function () {\n            var $this = $(this),\n                optgroup = $this.data('optgroup');\n\n            if (that.$lis.filter('[data-optgroup=' + optgroup + ']').not($this).filter(':visible').length === 0) {\n              $this.addClass('hidden');\n            }\n          });\n\n          if (!that.$menu.find('li').filter(':visible:not(.no-results)').length) {\n            if (!!no_results.parent().length) {\n              no_results.remove();\n            }\n\n            no_results.html(that.options.noneResultsText.replace('{0}', '\"' + htmlEscape(that.$searchbox.val()) + '\"')).show();\n            that.$menu.find('li').last().after(no_results);\n          } else if (!!no_results.parent().length) {\n            no_results.remove();\n          }\n        } else {\n          that.$lis.not('.is-hidden').removeClass('hidden');\n\n          if (!!no_results.parent().length) {\n            no_results.remove();\n          }\n        }\n\n        that.$menu.find('li.active').removeClass('active');\n        that.$menu.find('li').filter(':visible:not(.divider)').eq(0).addClass('active').find('a').focus();\n        $(this).focus();\n      });\n    },\n    _searchStyle: function _searchStyle() {\n      var style = 'icontains';\n\n      switch (this.options.liveSearchStyle) {\n        case 'begins':\n        case 'startsWith':\n          style = 'ibegins';\n          break;\n\n        case 'contains':\n        default:\n          break;\n        //no need to change the default\n      }\n\n      return style;\n    },\n    val: function val(value) {\n      if (typeof value !== 'undefined') {\n        this.$element.val(value);\n        this.render();\n        return this.$element;\n      } else {\n        return this.$element.val();\n      }\n    },\n    selectAll: function selectAll() {\n      this.findLis();\n      this.$lis.not('.divider').not('.disabled').not('.selected').filter(':visible').find('a').click();\n    },\n    deselectAll: function deselectAll() {\n      this.findLis();\n      this.$lis.not('.divider').not('.disabled').filter('.selected').filter(':visible').find('a').click();\n    },\n    keydown: function keydown(e) {\n      var $this = $(this),\n          $parent = $this.is('input') ? $this.parent().parent() : $this.parent(),\n          $items,\n          that = $parent.data('this'),\n          index,\n          next,\n          first,\n          last,\n          prev,\n          nextPrev,\n          prevIndex,\n          isActive,\n          keyCodeMap = {\n        32: ' ',\n        48: '0',\n        49: '1',\n        50: '2',\n        51: '3',\n        52: '4',\n        53: '5',\n        54: '6',\n        55: '7',\n        56: '8',\n        57: '9',\n        59: ';',\n        65: 'a',\n        66: 'b',\n        67: 'c',\n        68: 'd',\n        69: 'e',\n        70: 'f',\n        71: 'g',\n        72: 'h',\n        73: 'i',\n        74: 'j',\n        75: 'k',\n        76: 'l',\n        77: 'm',\n        78: 'n',\n        79: 'o',\n        80: 'p',\n        81: 'q',\n        82: 'r',\n        83: 's',\n        84: 't',\n        85: 'u',\n        86: 'v',\n        87: 'w',\n        88: 'x',\n        89: 'y',\n        90: 'z',\n        96: '0',\n        97: '1',\n        98: '2',\n        99: '3',\n        100: '4',\n        101: '5',\n        102: '6',\n        103: '7',\n        104: '8',\n        105: '9'\n      };\n      if (that.options.liveSearch) $parent = $this.parent().parent();\n      if (that.options.container) $parent = that.$menu;\n      $items = $('[role=menu] li a', $parent);\n      isActive = that.$menu.parent().hasClass('open');\n\n      if (!isActive && /([0-9]|[A-z])/.test(String.fromCharCode(e.keyCode))) {\n        if (!that.options.container) {\n          that.setSize();\n          that.$menu.parent().addClass('open');\n          isActive = true;\n        } else {\n          that.$newElement.trigger('click');\n        }\n\n        that.$searchbox.focus();\n      }\n\n      if (that.options.liveSearch) {\n        if (/(^9$|27)/.test(e.keyCode.toString(10)) && isActive && that.$menu.find('.active').length === 0) {\n          e.preventDefault();\n          that.$menu.parent().removeClass('open');\n          that.$button.focus();\n        }\n\n        $items = $('[role=menu] li:not(.divider):not(.dropdown-header):visible a', $parent);\n\n        if (!$this.val() && !/(38|40)/.test(e.keyCode.toString(10))) {\n          if ($items.filter('.active').length === 0) {\n            $items = that.$newElement.find('li a');\n\n            if (that.options.liveSearchNormalize) {\n              $items = $items.filter(':a' + that._searchStyle() + '(' + normalizeToBase(keyCodeMap[e.keyCode]) + ')');\n            } else {\n              $items = $items.filter(':' + that._searchStyle() + '(' + keyCodeMap[e.keyCode] + ')');\n            }\n          }\n        }\n      }\n\n      if (!$items.length) return;\n\n      if (/(38|40)/.test(e.keyCode.toString(10))) {\n        index = $items.index($items.filter(':focus'));\n        first = $items.parent(':not(.disabled):visible').first().index();\n        last = $items.parent(':not(.disabled):visible').last().index();\n        next = $items.eq(index).parent().nextAll(':not(.disabled):visible').eq(0).index();\n        prev = $items.eq(index).parent().prevAll(':not(.disabled):visible').eq(0).index();\n        nextPrev = $items.eq(next).parent().prevAll(':not(.disabled):visible').eq(0).index();\n\n        if (that.options.liveSearch) {\n          $items.each(function (i) {\n            if ($(this).is(':not(.disabled)')) {\n              $(this).data('index', i);\n            }\n          });\n          index = $items.index($items.filter('.active'));\n          first = $items.filter(':not(.disabled):visible').first().data('index');\n          last = $items.filter(':not(.disabled):visible').last().data('index');\n          next = $items.eq(index).nextAll(':not(.disabled):visible').eq(0).data('index');\n          prev = $items.eq(index).prevAll(':not(.disabled):visible').eq(0).data('index');\n          nextPrev = $items.eq(next).prevAll(':not(.disabled):visible').eq(0).data('index');\n        }\n\n        prevIndex = $this.data('prevIndex');\n\n        if (e.keyCode == 38) {\n          if (that.options.liveSearch) index -= 1;\n          if (index != nextPrev && index > prev) index = prev;\n          if (index < first) index = first;\n          if (index == prevIndex) index = last;\n        }\n\n        if (e.keyCode == 40) {\n          if (that.options.liveSearch) index += 1;\n          if (index == -1) index = 0;\n          if (index != nextPrev && index < next) index = next;\n          if (index > last) index = last;\n          if (index == prevIndex) index = first;\n        }\n\n        $this.data('prevIndex', index);\n\n        if (!that.options.liveSearch) {\n          $items.eq(index).focus();\n        } else {\n          e.preventDefault();\n\n          if (!$this.is('.dropdown-toggle')) {\n            $items.removeClass('active');\n            $items.eq(index).addClass('active').find('a').focus();\n            $this.focus();\n          }\n        }\n      } else if (!$this.is('input')) {\n        var keyIndex = [],\n            count,\n            prevKey;\n        $items.each(function () {\n          if ($(this).parent().is(':not(.disabled)')) {\n            if ($.trim($(this).text().toLowerCase()).substring(0, 1) == keyCodeMap[e.keyCode]) {\n              keyIndex.push($(this).parent().index());\n            }\n          }\n        });\n        count = $(document).data('keycount');\n        count++;\n        $(document).data('keycount', count);\n        prevKey = $.trim($(':focus').text().toLowerCase()).substring(0, 1);\n\n        if (prevKey != keyCodeMap[e.keyCode]) {\n          count = 1;\n          $(document).data('keycount', count);\n        } else if (count >= keyIndex.length) {\n          $(document).data('keycount', 0);\n          if (count > keyIndex.length) count = 1;\n        }\n\n        $items.eq(keyIndex[count - 1]).focus();\n      } // Select focused option if \"Enter\", \"Spacebar\" or \"Tab\" (when selectOnTab is true) are pressed inside the menu.\n\n\n      if ((/(13|32)/.test(e.keyCode.toString(10)) || /(^9$)/.test(e.keyCode.toString(10)) && that.options.selectOnTab) && isActive) {\n        if (!/(32)/.test(e.keyCode.toString(10))) e.preventDefault();\n\n        if (!that.options.liveSearch) {\n          var elem = $(':focus');\n          elem.click(); // Bring back focus for multiselects\n\n          elem.focus(); // Prevent screen from scrolling if the user hit the spacebar\n\n          e.preventDefault();\n        } else if (!/(32)/.test(e.keyCode.toString(10))) {\n          that.$menu.find('.active a').click();\n          $this.focus();\n        }\n\n        $(document).data('keycount', 0);\n      }\n\n      if (/(^9$|27)/.test(e.keyCode.toString(10)) && isActive && (that.multiple || that.options.liveSearch) || /(27)/.test(e.keyCode.toString(10)) && !isActive) {\n        that.$menu.parent().removeClass('open');\n        that.$button.focus();\n      }\n    },\n    mobile: function mobile() {\n      this.$element.addClass('mobile-device').appendTo(this.$newElement);\n      if (this.options.container) this.$menu.hide();\n    },\n    refresh: function refresh() {\n      this.$lis = null;\n      this.reloadLi();\n      this.render();\n      this.setWidth();\n      this.setStyle();\n      this.checkDisabled();\n      this.liHeight();\n    },\n    hide: function hide() {\n      this.$newElement.hide();\n    },\n    show: function show() {\n      this.$newElement.show();\n    },\n    remove: function remove() {\n      this.$newElement.remove();\n      this.$element.remove();\n    }\n  }; // SELECTPICKER PLUGIN DEFINITION\n  // ==============================\n\n  function Plugin(option, event) {\n    // get the args of the outer function..\n    var args = arguments; // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them\n    // to get lost/corrupted in android 2.3 and IE9 #715 #775\n\n    var _option = option,\n        _event = event;\n    [].shift.apply(args);\n    var value;\n    var chain = this.each(function () {\n      var $this = $(this);\n\n      if ($this.is('select')) {\n        var data = $this.data('selectpicker'),\n            options = typeof _option == 'object' && _option;\n\n        if (!data) {\n          var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);\n          $this.data('selectpicker', data = new Selectpicker(this, config, _event));\n        } else if (options) {\n          for (var i in options) {\n            if (options.hasOwnProperty(i)) {\n              data.options[i] = options[i];\n            }\n          }\n        }\n\n        if (typeof _option == 'string') {\n          if (data[_option] instanceof Function) {\n            value = data[_option].apply(data, args);\n          } else {\n            value = data.options[_option];\n          }\n        }\n      }\n    });\n\n    if (typeof value !== 'undefined') {\n      //noinspection JSUnusedAssignment\n      return value;\n    } else {\n      return chain;\n    }\n  }\n\n  var old = $.fn.selectpicker;\n  $.fn.selectpicker = Plugin;\n  $.fn.selectpicker.Constructor = Selectpicker; // SELECTPICKER NO CONFLICT\n  // ========================\n\n  $.fn.selectpicker.noConflict = function () {\n    $.fn.selectpicker = old;\n    return this;\n  };\n\n  $(document).data('keycount', 0).on('keydown', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bs-searchbox input', Selectpicker.prototype.keydown).on('focusin.modal', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=menu], .bs-searchbox input', function (e) {\n    e.stopPropagation();\n  }); // SELECTPICKER DATA-API\n  // =====================\n\n  $(window).on('load.bs.select.data-api', function () {\n    $('.selectpicker').each(function () {\n      var $selectpicker = $(this);\n      Plugin.call($selectpicker, $selectpicker.data());\n    });\n  });\n})(jQuery);","map":null,"metadata":{},"sourceType":"script"}