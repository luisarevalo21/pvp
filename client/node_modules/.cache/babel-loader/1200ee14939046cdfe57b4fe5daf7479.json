{"ast":null,"code":"import _objectSpread from \"/Users/luise.arevalo/Desktop/React/pvp-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/luise.arevalo/Desktop/React/pvp-app/src/UI/Table/Table.js\";\nimport React from \"react\";\nimport classes from \"./Table.module.css\";\n\nvar table = function table(props) {\n  console.log(\"the moves are\", props.quickMoves);\n  console.log(\"selected pokemon \", props.selectedPokemon);\n  var quickMoves = [];\n  var chargeMoves = [];\n  var moveData = [];\n\n  var copy = _objectSpread({}, props.selectedPokemon[0]);\n\n  console.log(\"copy\", copy); // let filertedData = {};\n\n  for (var key in copy) {\n    console.log(key);\n\n    if (key === \"quick move 1\" || key === \"quick move 2\" || key === \"quick move 3\" || key === \"quick move 4\" || key === \"quick move 5\") {\n      quickMoves.push({\n        key: copy[key]\n      });\n    } // console.log(\"value is\", props.quickMoves.map());\n\n  }\n\n  console.log(\"QUICK MOES AARE\", quickMoves);\n  console.log(\"quick moves are\", quickMoves);\n  moveData = props.quickMoves.filter(function (element) {\n    // console.log(element.fastMoveName);\n    return quickMoves.map(function (ele) {\n      console.log(element.fastMoveName === ele.key);\n      console.log(\"element.fastmove\");\n      return ele.key === element.fastMoveName;\n    }); // return element.fastMoveName === quickMoves[element.fastMoveName];\n  }); // element.idPVP;\n  // return\n  // console.log(element.fastMoveName);\n  // });\n\n  console.log(\"THE MOVES ARE\", moveData); // }\n  // console.log(filertedData);\n  // const filteredData = Object.keys(copy)\n  //   .filter(element => copy[element] !== null)\n  //   .reduce((accumulator, currentValue) => {\n  //     accumulator[currentValue] = copy[currentValue];\n  //     return accumulator;\n  //   }, {});\n  // console.log(\"data is\", filteredData);\n  // element.filter(ele => {\n  //   console.log(ele);\n  // });\n  // return keys.filter(key => {\n  //   console.log(element[key]);\n  //   return element[key] !== null;\n  // });\n  // console.log(\"data is\", filetedData);\n  // const keys = Object.keys(props.selectedPokemon[0]);\n  // props.selectedPokemon.map(element => {\n  //   console.log(element);\n  // });\n  // console.log(keys);\n  // for (keys in props.selectedPokemon[0]) {\n  //   console.log(props.selectedPokemon[0][keys]);\n  //   console.log(keys);\n  // }\n  // console.log(\"inside props table\", props.moveStats);\n  // console.log(props.moves);\n  // console.log(\"the data is data\", props.moves);\n\n  var moves = [];\n  var data = [];\n  var basePower = [];\n  var duration = [];\n  var energyDelta = [];\n  var moveCooldown = []; // for (let key in props.moveStats) {\n  //   console.log(key);\n  // }\n  // for (let key in props.moves) {\n  //   const moveKeys = Object.keys(props.moveStats);\n  //   moveKeys.map(keys => {\n  //     if (keys === key) {\n  //       moves.push({ id: key, quickMoveStats: props.moveStats[key] });\n  //     }\n  //   });\n  //   data.push(key);\n  // }\n  // console.log(\"the data is \", moves);\n  // fining the largest\n  // let largest = Math.max(\n  //   ...moves.map(element => element.quickMoveStats.basePower)\n  // );\n  // basePower = moves.map(element => {\n  //   console.log(largest);\n  //   // const largest = Math.max(element.quickMoveStats.basePower);\n  //   if (largest === element.quickMoveStats.basePower) {\n  //     return (\n  //       <td key={Math.random()} className={classes.Largest}>\n  //         {element.quickMoveStats.basePower}\n  //       </td>\n  //     );\n  //   } else {\n  //     return <td key={Math.random()}>{element.quickMoveStats.basePower}</td>;\n  //   }\n  // });\n  // quick_moves = quickMoves.map(element => {\n  //   return <td key={element.key}>{element.key}</td>;\n  //   console.log(\"element is\", element);\n  // });\n\n  basePower = moves.map(function (el) {\n    console.log(\"printing el now\", el.quickMoveStats);\n    return React.createElement(\"td\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, el.quickMoveStats.basePower);\n  });\n  duration = moves.map(function (el) {\n    console.log(\"printing el now\", el.quickMoveStats);\n    return React.createElement(\"td\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, el.quickMoveStats.duration);\n  });\n  energyDelta = moves.map(function (el) {\n    return React.createElement(\"td\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \" \", el.quickMoveStats.energyDelta);\n  });\n  moveCooldown = moves.map(function (el) {\n    return React.createElement(\"td\", {\n      key: Math.random(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, el.quickMoveStats.moveCooldown);\n  });\n  return React.createElement(\"div\", {\n    className: classes.Table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, React.createElement(\"table\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    key: Math.random(),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, \"Stats\"), quickMoves.map(function (element) {\n    return React.createElement(\"th\", {\n      key: element.key,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, element.key);\n  }))), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    key: Math.random(),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Base Power\"), basePower), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    key: Math.random(),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, \"Duration\"), duration), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    key: Math.random(),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, \"Energy Delta\"), energyDelta), React.createElement(\"tr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    key: Math.random(),\n    style: {\n      textAlign: \"left\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \"Move Cooldown\"), moveCooldown))));\n};\n\nexport default table;","map":{"version":3,"sources":["/Users/luise.arevalo/Desktop/React/pvp-app/src/UI/Table/Table.js"],"names":["React","classes","table","props","console","log","quickMoves","selectedPokemon","chargeMoves","moveData","copy","key","push","filter","element","map","ele","fastMoveName","moves","data","basePower","duration","energyDelta","moveCooldown","el","quickMoveStats","Math","random","Table","textAlign"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport classes from \"./Table.module.css\";\n\nconst table = props => {\n  console.log(\"the moves are\", props.quickMoves);\n  console.log(\"selected pokemon \", props.selectedPokemon);\n  const quickMoves = [];\n  const chargeMoves = [];\n  let moveData = [];\n  const copy = { ...props.selectedPokemon[0] };\n  console.log(\"copy\", copy);\n  // let filertedData = {};\n  for (let key in copy) {\n    console.log(key);\n    if (\n      key === \"quick move 1\" ||\n      key === \"quick move 2\" ||\n      key === \"quick move 3\" ||\n      key === \"quick move 4\" ||\n      key === \"quick move 5\"\n    ) {\n      quickMoves.push({ key: copy[key] });\n    }\n\n    // console.log(\"value is\", props.quickMoves.map());\n  }\n  console.log(\"QUICK MOES AARE\", quickMoves);\n  console.log(\"quick moves are\", quickMoves);\n  moveData = props.quickMoves.filter(element => {\n    // console.log(element.fastMoveName);\n\n    return quickMoves.map(ele => {\n      console.log(element.fastMoveName === ele.key);\n      console.log(\"element.fastmove\");\n\n      return ele.key === element.fastMoveName;\n    });\n\n    // return element.fastMoveName === quickMoves[element.fastMoveName];\n  });\n\n  // element.idPVP;\n  // return\n  // console.log(element.fastMoveName);\n  // });\n  console.log(\"THE MOVES ARE\", moveData);\n\n  // }\n  // console.log(filertedData);\n\n  // const filteredData = Object.keys(copy)\n  //   .filter(element => copy[element] !== null)\n  //   .reduce((accumulator, currentValue) => {\n  //     accumulator[currentValue] = copy[currentValue];\n  //     return accumulator;\n  //   }, {});\n  // console.log(\"data is\", filteredData);\n\n  // element.filter(ele => {\n  //   console.log(ele);\n  // });\n  // return keys.filter(key => {\n  //   console.log(element[key]);\n  //   return element[key] !== null;\n  // });\n\n  // console.log(\"data is\", filetedData);\n  // const keys = Object.keys(props.selectedPokemon[0]);\n  // props.selectedPokemon.map(element => {\n  //   console.log(element);\n  // });\n  // console.log(keys);\n  // for (keys in props.selectedPokemon[0]) {\n  //   console.log(props.selectedPokemon[0][keys]);\n  //   console.log(keys);\n  // }\n  // console.log(\"inside props table\", props.moveStats);\n  // console.log(props.moves);\n  // console.log(\"the data is data\", props.moves);\n\n  let moves = [];\n  let data = [];\n  let basePower = [];\n  let duration = [];\n  let energyDelta = [];\n  let moveCooldown = [];\n\n  // for (let key in props.moveStats) {\n  //   console.log(key);\n  // }\n  // for (let key in props.moves) {\n  //   const moveKeys = Object.keys(props.moveStats);\n  //   moveKeys.map(keys => {\n  //     if (keys === key) {\n  //       moves.push({ id: key, quickMoveStats: props.moveStats[key] });\n  //     }\n  //   });\n\n  //   data.push(key);\n  // }\n\n  // console.log(\"the data is \", moves);\n  // fining the largest\n  // let largest = Math.max(\n  //   ...moves.map(element => element.quickMoveStats.basePower)\n  // );\n  // basePower = moves.map(element => {\n  //   console.log(largest);\n  //   // const largest = Math.max(element.quickMoveStats.basePower);\n\n  //   if (largest === element.quickMoveStats.basePower) {\n  //     return (\n  //       <td key={Math.random()} className={classes.Largest}>\n  //         {element.quickMoveStats.basePower}\n  //       </td>\n  //     );\n  //   } else {\n  //     return <td key={Math.random()}>{element.quickMoveStats.basePower}</td>;\n  //   }\n  // });\n  // quick_moves = quickMoves.map(element => {\n  //   return <td key={element.key}>{element.key}</td>;\n  //   console.log(\"element is\", element);\n  // });\n\n  basePower = moves.map(el => {\n    console.log(\"printing el now\", el.quickMoveStats);\n    return <td key={Math.random()}>{el.quickMoveStats.basePower}</td>;\n  });\n\n  duration = moves.map(el => {\n    console.log(\"printing el now\", el.quickMoveStats);\n    return <td key={Math.random()}>{el.quickMoveStats.duration}</td>;\n  });\n\n  energyDelta = moves.map(el => (\n    <td key={Math.random()}> {el.quickMoveStats.energyDelta}</td>\n  ));\n  moveCooldown = moves.map(el => (\n    <td key={Math.random()}>{el.quickMoveStats.moveCooldown}</td>\n  ));\n\n  return (\n    <div className={classes.Table}>\n      <table>\n        <thead>\n          <tr>\n            <th key={Math.random()} style={{ textAlign: \"left\" }}>\n              Stats\n            </th>\n\n            {quickMoves.map(element => {\n              return <th key={element.key}>{element.key}</th>;\n            })}\n            {/* \n            {data.map((el, index) => {\n              return <th key={Math.random()}>{el} </th>;\n            })} */}\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td key={Math.random()} style={{ textAlign: \"left\" }}>\n              Base Power\n            </td>\n            {basePower}\n          </tr>\n          <tr>\n            <td key={Math.random()} style={{ textAlign: \"left\" }}>\n              Duration\n            </td>\n            {duration}\n          </tr>\n          <tr>\n            <td key={Math.random()} style={{ textAlign: \"left\" }}>\n              Energy Delta\n            </td>\n            {energyDelta}\n          </tr>\n          <tr>\n            <td key={Math.random()} style={{ textAlign: \"left\" }}>\n              Move Cooldown\n            </td>\n            {moveCooldown}\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default table;\n"]},"metadata":{},"sourceType":"module"}